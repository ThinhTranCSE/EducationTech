// <auto-generated />
using System;
using EducationTech.DataAccess.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationTech.Migrations
{
    [DbContext(typeof(EducationTechContext))]
    [Migration("20240925035753_AddLOTypeToLearningObjectTable")]
    partial class AddLOTypeToLearningObjectTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.AnswerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerUsers");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedCommentId")
                        .HasColumnType("int");

                    b.Property<int>("Right")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RepliedCommentId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Comunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Comunities");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.InstructorApproved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorApproveds");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.LearnerCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Rate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerCourses");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ComunityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ComunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.UserKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserKeys");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Right")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.CourseSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSections");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.Learner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BackgroundKnowledge")
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Qualification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Learners");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearnerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<int>("LearningObjectId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TimeTaken")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisitedTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.HasIndex("LearningObjectId");

                    b.ToTable("LearnerLogs");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearningObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AggregationLevel")
                        .HasColumnType("int");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<int>("InteractivityLevel")
                        .HasColumnType("int");

                    b.Property<int>("InteractivityType")
                        .HasColumnType("int");

                    b.Property<int>("LearningResourceType")
                        .HasColumnType("int");

                    b.Property<int>("MaxLearningTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("SemanticDensity")
                        .HasColumnType("int");

                    b.Property<int>("Structure")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("LearningObjects");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearningStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Active")
                        .HasColumnType("float");

                    b.Property<float>("Global")
                        .HasColumnType("float");

                    b.Property<float>("Intuitive")
                        .HasColumnType("float");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<float>("Reflective")
                        .HasColumnType("float");

                    b.Property<float>("Sensing")
                        .HasColumnType("float");

                    b.Property<float>("Sequential")
                        .HasColumnType("float");

                    b.Property<float>("Verbal")
                        .HasColumnType("float");

                    b.Property<float>("Visual")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId")
                        .IsUnique();

                    b.ToTable("LearningStyles");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.RecommendTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RecommendTopics");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.TopicConjunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NextTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NextTopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicConjunctions");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Answer", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Business.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.AnswerUser", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Business.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Comment", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Business.Comment", "RepliedComment")
                        .WithMany()
                        .HasForeignKey("RepliedCommentId");

                    b.HasOne("EducationTech.DataAccess.Entities.Business.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepliedComment");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Comunity", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.CourseCategory", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Category", "Category")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.Course", "Course")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Image", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.UploadedFile", "File")
                        .WithOne("Image")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Business.Image", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.InstructorApproved", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.LearnerCourse", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Course", "Course")
                        .WithMany("LearnerCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Question", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Business.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Quiz", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Lesson", "Lesson")
                        .WithOne("Quiz")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Business.Quiz", "LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Topic", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Business.Comunity", "Comunity")
                        .WithMany()
                        .HasForeignKey("ComunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.UserKey", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithOne("UserKey")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Business.UserKey", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Video", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.UploadedFile", "File")
                        .WithOne("Video")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Business.Video", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.Lesson", "Lesson")
                        .WithOne("Video")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Business.Video", "LessonId");

                    b.Navigation("File");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Course", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.CourseSection", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Course", "Course")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Lesson", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.CourseSection", "CourseSection")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.RolePermission", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.UploadedFile", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.UserRole", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Master.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Master.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearnerLog", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.Learner", "Learner")
                        .WithMany("LearnerLogs")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.LearningObject", "LearningObject")
                        .WithMany("LearnerLogs")
                        .HasForeignKey("LearningObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");

                    b.Navigation("LearningObject");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearningObject", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.RecommendTopic", "Topic")
                        .WithMany("LearningObjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearningStyle", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.Learner", "Learner")
                        .WithOne("LearningStyle")
                        .HasForeignKey("EducationTech.DataAccess.Entities.Recommendation.LearningStyle", "LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.TopicConjunction", b =>
                {
                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.RecommendTopic", "NextTopic")
                        .WithMany()
                        .HasForeignKey("NextTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationTech.DataAccess.Entities.Recommendation.RecommendTopic", "Topic")
                        .WithMany("NextTopicConjuctions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextTopic");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Business.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Category", b =>
                {
                    b.Navigation("CourseCategories");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Course", b =>
                {
                    b.Navigation("CourseCategories");

                    b.Navigation("CourseSections");

                    b.Navigation("LearnerCourses");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.CourseSection", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Lesson", b =>
                {
                    b.Navigation("Quiz")
                        .IsRequired();

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.UploadedFile", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Master.User", b =>
                {
                    b.Navigation("UserKey")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.Learner", b =>
                {
                    b.Navigation("LearnerLogs");

                    b.Navigation("LearningStyle")
                        .IsRequired();
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.LearningObject", b =>
                {
                    b.Navigation("LearnerLogs");
                });

            modelBuilder.Entity("EducationTech.DataAccess.Entities.Recommendation.RecommendTopic", b =>
                {
                    b.Navigation("LearningObjects");

                    b.Navigation("NextTopicConjuctions");
                });
#pragma warning restore 612, 618
        }
    }
}
